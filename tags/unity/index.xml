<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Unity on Hello Hugo</title>
    <link>https://junfff.github.io/tags/unity/</link>
    <description>Recent content in Unity on Hello Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>james922@163.com (James)</managingEditor>
    <webMaster>james922@163.com (James)</webMaster>
    <copyright>©2023, All Rights Reserved</copyright>
    <lastBuildDate>Wed, 08 Feb 2023 12:34:29 +0800</lastBuildDate>
    
        <atom:link href="https://junfff.github.io/tags/unity/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>Unity::SkillLogicEditor</title>
        <link>https://junfff.github.io/posts/unity/2023-02-08-skilllogiceditor/</link>
        <pubDate>Wed, 08 Feb 2023 12:34:29 +0800</pubDate>
        <author>james922@163.com (James)</author>
        <atom:modified>Wed, 08 Feb 2023 12:34:29 +0800</atom:modified>
        <guid>https://junfff.github.io/posts/unity/2023-02-08-skilllogiceditor/</guid>
        <description>技能编辑器&amp;amp;逻辑编辑器</description>
        
        <dc:creator>James</dc:creator>
        
        
        
        
          
            
              <category>Unity</category>
            
          
        
        
          
            
              <category>Unity</category>
            
          
        
        
      </item>
      
      <item>
        <title>Unity::LuaString</title>
        <link>https://junfff.github.io/posts/lua/2022-06-10-luastring/</link>
        <pubDate>Fri, 10 Jun 2022 17:21:02 +0800</pubDate>
        <author>james922@163.com (James)</author>
        <atom:modified>Fri, 10 Jun 2022 17:21:02 +0800</atom:modified>
        <guid>https://junfff.github.io/posts/lua/2022-06-10-luastring/</guid>
        <description>-- -- lua -- 判断utf8字符byte长度 -- 0xxxxxxx - 1 byte -- 110yxxxx - 192, 2 byte -- 1110yyyy - 225, 3 byte -- 11110zzz - 240, 4 byte local function chsize(char) if not char then print(&amp;#34;not char&amp;#34;) return 0 elseif char &amp;gt; 240 then return 4 elseif char &amp;gt; 225 then return 3 elseif char &amp;gt; 192</description>
        
        <dc:creator>James</dc:creator>
        
        
        
        
          
            
              <category>Unity</category>
            
          
        
        
          
            
              <category>Lua</category>
            
          
        
        
      </item>
      
      <item>
        <title>Unity::testHugo</title>
        <link>https://junfff.github.io/posts/test/2022-05-22-testhugo/</link>
        <pubDate>Sun, 22 May 2022 11:19:16 +0800</pubDate>
        <author>james922@163.com (James)</author>
        <atom:modified>Sun, 22 May 2022 11:19:16 +0800</atom:modified>
        <guid>https://junfff.github.io/posts/test/2022-05-22-testhugo/</guid>
        <description>image: beach.jpg image: images/feature2/gallery.png Sample images from Pixabay $image := resources.Get &amp;ldquo;images/feature2/gallery.png&amp;rdquo; - {{ with .Resources.ByType &amp;ldquo;image&amp;rdquo; }} {{ range . }} {{ .RelPermalink }} {{ end }} {{ end }} Sample Image: Image with title, caption, alt, ...</description>
        
        <dc:creator>James</dc:creator>
        
        
        
        
          
            
              <category>Unity</category>
            
          
        
        
          
            
              <category>Unity</category>
            
          
        
        
      </item>
      
      <item>
        <title>Unity::帧同步 预测回滚</title>
        <link>https://junfff.github.io/posts/interview/2022-05-10-unity%E5%B8%A7%E5%90%8C%E6%AD%A5-%E9%A2%84%E6%B5%8B%E5%9B%9E%E6%BB%9A/</link>
        <pubDate>Tue, 10 May 2022 22:24:41 +0800</pubDate>
        <author>james922@163.com (James)</author>
        <atom:modified>Tue, 10 May 2022 22:24:41 +0800</atom:modified>
        <guid>https://junfff.github.io/posts/interview/2022-05-10-unity%E5%B8%A7%E5%90%8C%E6%AD%A5-%E9%A2%84%E6%B5%8B%E5%9B%9E%E6%BB%9A/</guid>
        <description>备份数据 每个Entity 的所有 component都实现 IBackup ,里面的数据都写入 stream里面 #回滚数据 从二进制数据流里面还原LogicEnti</description>
        
        <dc:creator>James</dc:creator>
        
        
        
        
          
            
              <category>Unity</category>
            
          
        
        
          
            
              <category>Unity</category>
            
          
        
        
      </item>
      
      <item>
        <title>C#泛型接口的抗变和协变</title>
        <link>https://junfff.github.io/posts/interview/2022-05-08-%E6%B3%9B%E5%9E%8B%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%8A%97%E5%8F%98%E5%92%8C%E5%8D%8F%E5%8F%98/</link>
        <pubDate>Sun, 08 May 2022 01:08:51 +0800</pubDate>
        <author>james922@163.com (James)</author>
        <atom:modified>Sun, 08 May 2022 01:08:51 +0800</atom:modified>
        <guid>https://junfff.github.io/posts/interview/2022-05-08-%E6%B3%9B%E5%9E%8B%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%8A%97%E5%8F%98%E5%92%8C%E5%8D%8F%E5%8F%98/</guid>
        <description>泛型接口的抗变(也叫逆变 Contravariance)和协变(Covariance)有什么区别? 先说定义, 协变和逆变能够实现数组类型、委托类</description>
        
        <dc:creator>James</dc:creator>
        
        
        
        
          
            
              <category>Unity</category>
            
          
        
        
          
            
              <category>Unity</category>
            
          
        
        
      </item>
      
      <item>
        <title>Unity::GC的实现</title>
        <link>https://junfff.github.io/posts/interview/2022-05-04-unity-gc/</link>
        <pubDate>Wed, 04 May 2022 23:44:28 +0800</pubDate>
        <author>james922@163.com (James)</author>
        <atom:modified>Wed, 04 May 2022 23:44:28 +0800</atom:modified>
        <guid>https://junfff.github.io/posts/interview/2022-05-04-unity-gc/</guid>
        <description>GC的实现 实现GC的策略有很多种，其中最常见一种就是 Tracing garbage collection，或者叫 Mark-Sweep，这种算法会通过一个 root Object，</description>
        
        <dc:creator>James</dc:creator>
        
        
        
        
          
            
              <category>Unity</category>
            
          
        
        
          
            
              <category>Unity</category>
            
          
        
        
      </item>
      
      <item>
        <title>Unity::优化</title>
        <link>https://junfff.github.io/posts/interview/2023-02-03-%E4%BC%98%E5%8C%96/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>james922@163.com (James)</author>
        
        <guid>https://junfff.github.io/posts/interview/2023-02-03-%E4%BC%98%E5%8C%96/</guid>
        <description>文件名称：优化.md CPU 耗时计算，渲染次数，算法, 计算hashcode GPU 静态合批，动态合批， DC图集 GC 创建新对象的时候，申请内存，执行gc操作</description>
        
        <dc:creator>James</dc:creator>
        
        
        
        
          
            
              <category>Unity</category>
            
          
        
        
          
            
              <category>Unity</category>
            
          
        
        
      </item>
      

    
  </channel>
</rss>
